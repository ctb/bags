#! /usr/bin/env python
import sys
import os
import optparse
from glob import glob
from pygr import cnestedlist
from pygr.seqdb import SequenceFileDB
from bags.read_ptt import ptt_parser
from bags.annotations import BagsAnnotationMaker

parser = optparse.OptionParser()
parser.add_option('-v', '--verbose', dest='verbose', action='store_true',
			help='turn on verbose output', default=False)
parser.add_option('--debug', dest='debug', action='store_true',
			help='turn on debug output', default=False)

(options, args) = parser.parse_args()

nickname = args[0]
genome_files = args[1:]

genome_output = os.path.dirname(genome_files[0])
genome_output = os.path.join(genome_output, nickname + '.fa')
genome_output = os.path.realpath(genome_output)

anno_output = os.path.dirname(genome_files[0])
anno_output = os.path.join(anno_output, nickname + '.annot')
anno_output = os.path.realpath(anno_output)

map_output = os.path.dirname(genome_files[0])
map_output = os.path.join(map_output, nickname + '.genemap')
map_output = os.path.realpath(map_output)

for test_file in genome_files:
   if not test_file.endswith('.fna'):
      print "WARNING, %s doesn't look like an NCBI genome file: it doesn't end in .fna!"
      print "Continuing anyway, because I'm optimistic."

if options.verbose:
   print "Loading genome as '%s'..." % nickname
   print '...from files %s' % ",".join(genome_files)
   print '...and saving into %s' % genome_output

###

# remove cached seqdb files
if options.verbose:
   print 'Removing %s .pureseq/.seqlen cache files' % genome_output
   
try:
   os.unlink(genome_output + '.pureseq')
except OSError:
   pass

try:
   os.unlink(genome_output + '.seqlen')
except OSError:
   pass

###

# NCBI distributes bacterial genomes/chromosomes/plasmids as separate
# files.  Here, read them all in and concatenate into a single genome
# file for pygr purposes.

output_fp = open(genome_output, 'w')
sequence_names = []

for filename in genome_files:
   content = open(filename).read()
   if not content.startswith('>'):
      print 'ERROR: %s doesn\'t look like a FASTA file; exiting' % filename
      sys.exit(-1)

   output_fp.write(content)
   output_fp.write('\n')

   fasta_name = content[1:100].split(' ', 1)[0]
   sequence_names.append(fasta_name)

   if options.verbose:
      print 'Read "%s" from file %s;'  % (fasta_name, filename,)
      print '...added to %s' % genome_output

output_fp.close()

genome = SequenceFileDB(genome_output)

# @CTB warn user not to delete or move 'genome_output'

###

# Now go find the associated annotation files...
anno_maker = BagsAnnotationMaker(anno_output)

for filename, sequence_name in zip(genome_files, sequence_names):
   ptt_file = filename.rsplit('.', 1)[0] + '.ptt'
   if not os.path.exists(ptt_file):
      print 'ERROR: cannot find associated ptt annotation file %s' % ptt_file
      sys.exit(-1)

   for n, line in enumerate(ptt_parser(open(ptt_file))):
      if line.gene == '-':
         line.gene = line.synonym
      anno_maker.add(line, sequence_name)

   if options.verbose:
      print 'read %d genes from PTT file %s' % (n, ptt_file)

anno_maker.close()

annodb = anno_maker.get_annodb(genome)

###

# build an NLMSA map

nlmsa = cnestedlist.NLMSA(map_output, 'w', pairwiseMode=True)
for v in annodb.itervalues():
    nlmsa.addAnnotation(v)
nlmsa.build(saveSeqDict=False)

###

print 'Saving to worldbase.Bio.bags.%s.genome|genes|gene_map' % nickname

# now save into worldbase as 'Bio.bags.<nickname>.genome|genes|gene_map'
from pygr import worldbase

genome.__doc__ = 'bar'
annodb.__doc__ = 'foo'
nlmsa.__doc__ = 'baz'

bags_path = getattr(worldbase.Bio.bags, nickname)
bags_path.genome = genome
bags_path.genes = annodb
bags_path.gene_map = nlmsa

worldbase.commit()
